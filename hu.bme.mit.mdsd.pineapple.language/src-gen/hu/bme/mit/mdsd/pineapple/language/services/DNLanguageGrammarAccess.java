/*
* generated by Xtext
*/
package hu.bme.mit.mdsd.pineapple.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DNLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataflowSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataflowSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataflowSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProtocolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtocolProtocolEnumRuleCall_4_0 = (RuleCall)cProtocolAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTypesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cTypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_5_2_0 = (RuleCall)cTypesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cTypesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_5_3_1_0 = (RuleCall)cTypesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cNetsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNetsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNetsDataflowNetParserRuleCall_8_0 = (RuleCall)cNetsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cNetsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNetsDataflowNetParserRuleCall_9_1_0 = (RuleCall)cNetsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cChannelsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cChannelsAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cChannelsChannelParserRuleCall_11_2_0 = (RuleCall)cChannelsAssignment_11_2.eContents().get(0);
		private final Group cGroup_11_3 = (Group)cGroup_11.eContents().get(3);
		private final Keyword cCommaKeyword_11_3_0 = (Keyword)cGroup_11_3.eContents().get(0);
		private final Assignment cChannelsAssignment_11_3_1 = (Assignment)cGroup_11_3.eContents().get(1);
		private final RuleCall cChannelsChannelParserRuleCall_11_3_1_0 = (RuleCall)cChannelsAssignment_11_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Keyword cProcessesKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cProcessesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cProcessesProcessParserRuleCall_14_0 = (RuleCall)cProcessesAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCommaKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cProcessesAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cProcessesProcessParserRuleCall_15_1_0 = (RuleCall)cProcessesAssignment_15_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//DataflowSystem returns dataflownet::DataflowSystem:
		//	"DataflowSystem" name=EString "{" "protocol" protocol=Protocol ("types" "{" types+=Type ("," types+=Type)* "}")?
		//	"nets" "{" nets+=DataflowNet ("," nets+=DataflowNet)* "}" ("channels" "{" channels+=Channel ("," channels+=Channel)*
		//	"}")? "processes" "{" processes+=Process ("," processes+=Process)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"DataflowSystem" name=EString "{" "protocol" protocol=Protocol ("types" "{" types+=Type ("," types+=Type)* "}")? "nets"
		//"{" nets+=DataflowNet ("," nets+=DataflowNet)* "}" ("channels" "{" channels+=Channel ("," channels+=Channel)* "}")?
		//"processes" "{" processes+=Process ("," processes+=Process)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"DataflowSystem"
		public Keyword getDataflowSystemKeyword_0() { return cDataflowSystemKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"protocol"
		public Keyword getProtocolKeyword_3() { return cProtocolKeyword_3; }

		//protocol=Protocol
		public Assignment getProtocolAssignment_4() { return cProtocolAssignment_4; }

		//Protocol
		public RuleCall getProtocolProtocolEnumRuleCall_4_0() { return cProtocolProtocolEnumRuleCall_4_0; }

		//("types" "{" types+=Type ("," types+=Type)* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"types"
		public Keyword getTypesKeyword_5_0() { return cTypesKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//types+=Type
		public Assignment getTypesAssignment_5_2() { return cTypesAssignment_5_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_5_2_0() { return cTypesTypeParserRuleCall_5_2_0; }

		//("," types+=Type)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//types+=Type
		public Assignment getTypesAssignment_5_3_1() { return cTypesAssignment_5_3_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_5_3_1_0() { return cTypesTypeParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"nets"
		public Keyword getNetsKeyword_6() { return cNetsKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//nets+=DataflowNet
		public Assignment getNetsAssignment_8() { return cNetsAssignment_8; }

		//DataflowNet
		public RuleCall getNetsDataflowNetParserRuleCall_8_0() { return cNetsDataflowNetParserRuleCall_8_0; }

		//("," nets+=DataflowNet)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//nets+=DataflowNet
		public Assignment getNetsAssignment_9_1() { return cNetsAssignment_9_1; }

		//DataflowNet
		public RuleCall getNetsDataflowNetParserRuleCall_9_1_0() { return cNetsDataflowNetParserRuleCall_9_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//("channels" "{" channels+=Channel ("," channels+=Channel)* "}")?
		public Group getGroup_11() { return cGroup_11; }

		//"channels"
		public Keyword getChannelsKeyword_11_0() { return cChannelsKeyword_11_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }

		//channels+=Channel
		public Assignment getChannelsAssignment_11_2() { return cChannelsAssignment_11_2; }

		//Channel
		public RuleCall getChannelsChannelParserRuleCall_11_2_0() { return cChannelsChannelParserRuleCall_11_2_0; }

		//("," channels+=Channel)*
		public Group getGroup_11_3() { return cGroup_11_3; }

		//","
		public Keyword getCommaKeyword_11_3_0() { return cCommaKeyword_11_3_0; }

		//channels+=Channel
		public Assignment getChannelsAssignment_11_3_1() { return cChannelsAssignment_11_3_1; }

		//Channel
		public RuleCall getChannelsChannelParserRuleCall_11_3_1_0() { return cChannelsChannelParserRuleCall_11_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11_4() { return cRightCurlyBracketKeyword_11_4; }

		//"processes"
		public Keyword getProcessesKeyword_12() { return cProcessesKeyword_12; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_13() { return cLeftCurlyBracketKeyword_13; }

		//processes+=Process
		public Assignment getProcessesAssignment_14() { return cProcessesAssignment_14; }

		//Process
		public RuleCall getProcessesProcessParserRuleCall_14_0() { return cProcessesProcessParserRuleCall_14_0; }

		//("," processes+=Process)*
		public Group getGroup_15() { return cGroup_15; }

		//","
		public Keyword getCommaKeyword_15_0() { return cCommaKeyword_15_0; }

		//processes+=Process
		public Assignment getProcessesAssignment_15_1() { return cProcessesAssignment_15_1; }

		//Process
		public RuleCall getProcessesProcessParserRuleCall_15_1_0() { return cProcessesProcessParserRuleCall_15_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUserTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComplexTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoubleTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBoolTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Type returns typehierarchy::Type:
		//	IntType | StringType | UserType | ComplexType | DoubleType | BoolType;
		public ParserRule getRule() { return rule; }

		//IntType | StringType | UserType | ComplexType | DoubleType | BoolType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }

		//UserType
		public RuleCall getUserTypeParserRuleCall_2() { return cUserTypeParserRuleCall_2; }

		//ComplexType
		public RuleCall getComplexTypeParserRuleCall_3() { return cComplexTypeParserRuleCall_3; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_4() { return cDoubleTypeParserRuleCall_4; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_5() { return cBoolTypeParserRuleCall_5; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateMachineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataflowNetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node returns dataflownet::Node:
		//	StateMachine | DataflowNet;
		public ParserRule getRule() { return rule; }

		//StateMachine | DataflowNet
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateMachine
		public RuleCall getStateMachineParserRuleCall_0() { return cStateMachineParserRuleCall_0; }

		//DataflowNet
		public RuleCall getDataflowNetParserRuleCall_1() { return cDataflowNetParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUserTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SimpleType returns typehierarchy::SimpleType:
		//	IntType | StringType | UserType | DoubleType | BoolType;
		public ParserRule getRule() { return rule; }

		//IntType | StringType | UserType | DoubleType | BoolType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }

		//UserType
		public RuleCall getUserTypeParserRuleCall_2() { return cUserTypeParserRuleCall_2; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_3() { return cDoubleTypeParserRuleCall_3; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_4() { return cBoolTypeParserRuleCall_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class DataflowNetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataflowNet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowNetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataflowNetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutputChannelsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutputChannelsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutputChannelsChannelCrossReference_4_2_0 = (CrossReference)cOutputChannelsAssignment_4_2.eContents().get(0);
		private final RuleCall cOutputChannelsChannelEStringParserRuleCall_4_2_0_1 = (RuleCall)cOutputChannelsChannelCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutputChannelsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutputChannelsChannelCrossReference_4_3_1_0 = (CrossReference)cOutputChannelsAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutputChannelsChannelEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cOutputChannelsChannelCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInputChannelsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInputChannelsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cInputChannelsChannelCrossReference_5_2_0 = (CrossReference)cInputChannelsAssignment_5_2.eContents().get(0);
		private final RuleCall cInputChannelsChannelEStringParserRuleCall_5_2_0_1 = (RuleCall)cInputChannelsChannelCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cInputChannelsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cInputChannelsChannelCrossReference_5_3_1_0 = (CrossReference)cInputChannelsAssignment_5_3_1.eContents().get(0);
		private final RuleCall cInputChannelsChannelEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cInputChannelsChannelCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cProcessKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProcessAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_6_1_0 = (CrossReference)cProcessAssignment_6_1.eContents().get(0);
		private final RuleCall cProcessProcessEStringParserRuleCall_6_1_0_1 = (RuleCall)cProcessProcessCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cNodesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cNodesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cNodesNodeParserRuleCall_7_2_0 = (RuleCall)cNodesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cNodesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cNodesNodeParserRuleCall_7_3_1_0 = (RuleCall)cNodesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOwnChannelsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOwnChannelsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cOwnChannelsChannelParserRuleCall_8_2_0 = (RuleCall)cOwnChannelsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cOwnChannelsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cOwnChannelsChannelParserRuleCall_8_3_1_0 = (RuleCall)cOwnChannelsAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DataflowNet returns dataflownet::DataflowNet:
		//	{dataflownet::DataflowNet} "DataflowNet" name=EString "{" ("outputChannels" "("
		//	outputChannels+=[dataflownet::Channel|EString] ("," outputChannels+=[dataflownet::Channel|EString])* ")")?
		//	("inputChannels" "(" inputChannels+=[dataflownet::Channel|EString] (","
		//	inputChannels+=[dataflownet::Channel|EString])* ")")? ("process" process=[dataflownet::Process|EString])? ("nodes"
		//	"{" nodes+=Node ("," nodes+=Node)* "}")? ("ownChannels" "{" ownChannels+=Channel ("," ownChannels+=Channel)* "}")?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{dataflownet::DataflowNet} "DataflowNet" name=EString "{" ("outputChannels" "("
		//outputChannels+=[dataflownet::Channel|EString] ("," outputChannels+=[dataflownet::Channel|EString])* ")")?
		//("inputChannels" "(" inputChannels+=[dataflownet::Channel|EString] (","
		//inputChannels+=[dataflownet::Channel|EString])* ")")? ("process" process=[dataflownet::Process|EString])? ("nodes" "{"
		//nodes+=Node ("," nodes+=Node)* "}")? ("ownChannels" "{" ownChannels+=Channel ("," ownChannels+=Channel)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{dataflownet::DataflowNet}
		public Action getDataflowNetAction_0() { return cDataflowNetAction_0; }

		//"DataflowNet"
		public Keyword getDataflowNetKeyword_1() { return cDataflowNetKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("outputChannels" "(" outputChannels+=[dataflownet::Channel|EString] (","
		//outputChannels+=[dataflownet::Channel|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"outputChannels"
		public Keyword getOutputChannelsKeyword_4_0() { return cOutputChannelsKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//outputChannels+=[dataflownet::Channel|EString]
		public Assignment getOutputChannelsAssignment_4_2() { return cOutputChannelsAssignment_4_2; }

		//[dataflownet::Channel|EString]
		public CrossReference getOutputChannelsChannelCrossReference_4_2_0() { return cOutputChannelsChannelCrossReference_4_2_0; }

		//EString
		public RuleCall getOutputChannelsChannelEStringParserRuleCall_4_2_0_1() { return cOutputChannelsChannelEStringParserRuleCall_4_2_0_1; }

		//("," outputChannels+=[dataflownet::Channel|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//outputChannels+=[dataflownet::Channel|EString]
		public Assignment getOutputChannelsAssignment_4_3_1() { return cOutputChannelsAssignment_4_3_1; }

		//[dataflownet::Channel|EString]
		public CrossReference getOutputChannelsChannelCrossReference_4_3_1_0() { return cOutputChannelsChannelCrossReference_4_3_1_0; }

		//EString
		public RuleCall getOutputChannelsChannelEStringParserRuleCall_4_3_1_0_1() { return cOutputChannelsChannelEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//("inputChannels" "(" inputChannels+=[dataflownet::Channel|EString] ("," inputChannels+=[dataflownet::Channel|EString])*
		//")")?
		public Group getGroup_5() { return cGroup_5; }

		//"inputChannels"
		public Keyword getInputChannelsKeyword_5_0() { return cInputChannelsKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//inputChannels+=[dataflownet::Channel|EString]
		public Assignment getInputChannelsAssignment_5_2() { return cInputChannelsAssignment_5_2; }

		//[dataflownet::Channel|EString]
		public CrossReference getInputChannelsChannelCrossReference_5_2_0() { return cInputChannelsChannelCrossReference_5_2_0; }

		//EString
		public RuleCall getInputChannelsChannelEStringParserRuleCall_5_2_0_1() { return cInputChannelsChannelEStringParserRuleCall_5_2_0_1; }

		//("," inputChannels+=[dataflownet::Channel|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//inputChannels+=[dataflownet::Channel|EString]
		public Assignment getInputChannelsAssignment_5_3_1() { return cInputChannelsAssignment_5_3_1; }

		//[dataflownet::Channel|EString]
		public CrossReference getInputChannelsChannelCrossReference_5_3_1_0() { return cInputChannelsChannelCrossReference_5_3_1_0; }

		//EString
		public RuleCall getInputChannelsChannelEStringParserRuleCall_5_3_1_0_1() { return cInputChannelsChannelEStringParserRuleCall_5_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//("process" process=[dataflownet::Process|EString])?
		public Group getGroup_6() { return cGroup_6; }

		//"process"
		public Keyword getProcessKeyword_6_0() { return cProcessKeyword_6_0; }

		//process=[dataflownet::Process|EString]
		public Assignment getProcessAssignment_6_1() { return cProcessAssignment_6_1; }

		//[dataflownet::Process|EString]
		public CrossReference getProcessProcessCrossReference_6_1_0() { return cProcessProcessCrossReference_6_1_0; }

		//EString
		public RuleCall getProcessProcessEStringParserRuleCall_6_1_0_1() { return cProcessProcessEStringParserRuleCall_6_1_0_1; }

		//("nodes" "{" nodes+=Node ("," nodes+=Node)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"nodes"
		public Keyword getNodesKeyword_7_0() { return cNodesKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//nodes+=Node
		public Assignment getNodesAssignment_7_2() { return cNodesAssignment_7_2; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_7_2_0() { return cNodesNodeParserRuleCall_7_2_0; }

		//("," nodes+=Node)*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//nodes+=Node
		public Assignment getNodesAssignment_7_3_1() { return cNodesAssignment_7_3_1; }

		//Node
		public RuleCall getNodesNodeParserRuleCall_7_3_1_0() { return cNodesNodeParserRuleCall_7_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }

		//("ownChannels" "{" ownChannels+=Channel ("," ownChannels+=Channel)* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"ownChannels"
		public Keyword getOwnChannelsKeyword_8_0() { return cOwnChannelsKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//ownChannels+=Channel
		public Assignment getOwnChannelsAssignment_8_2() { return cOwnChannelsAssignment_8_2; }

		//Channel
		public RuleCall getOwnChannelsChannelParserRuleCall_8_2_0() { return cOwnChannelsChannelParserRuleCall_8_2_0; }

		//("," ownChannels+=Channel)*
		public Group getGroup_8_3() { return cGroup_8_3; }

		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }

		//ownChannels+=Channel
		public Assignment getOwnChannelsAssignment_8_3_1() { return cOwnChannelsAssignment_8_3_1; }

		//Channel
		public RuleCall getOwnChannelsChannelParserRuleCall_8_3_1_0() { return cOwnChannelsChannelParserRuleCall_8_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChannelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Channel returns dataflownet::Channel:
		//	"Channel" name=EString "{" "type" type=[typehierarchy::Type|EString] "}";
		public ParserRule getRule() { return rule; }

		//"Channel" name=EString "{" "type" type=[typehierarchy::Type|EString] "}"
		public Group getGroup() { return cGroup; }

		//"Channel"
		public Keyword getChannelKeyword_0() { return cChannelKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//type=[typehierarchy::Type|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[typehierarchy::Type|EString]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_4_0_1() { return cTypeTypeEStringParserRuleCall_4_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHostKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHostEStringParserRuleCall_4_0 = (RuleCall)cHostAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process returns dataflownet::Process:
		//	"Process" name=EString "{" "host" host=EString "}";
		public ParserRule getRule() { return rule; }

		//"Process" name=EString "{" "host" host=EString "}"
		public Group getGroup() { return cGroup; }

		//"Process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"host"
		public Keyword getHostKeyword_3() { return cHostKeyword_3; }

		//host=EString
		public Assignment getHostAssignment_4() { return cHostAssignment_4; }

		//EString
		public RuleCall getHostEStringParserRuleCall_4_0() { return cHostEStringParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//IntType returns typehierarchy::IntType:
		//	{typehierarchy::IntType} "IntType" name=EString;
		public ParserRule getRule() { return rule; }

		//{typehierarchy::IntType} "IntType" name=EString
		public Group getGroup() { return cGroup; }

		//{typehierarchy::IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"IntType"
		public Keyword getIntTypeKeyword_1() { return cIntTypeKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//StringType returns typehierarchy::StringType:
		//	{typehierarchy::StringType} "StringType" name=EString;
		public ParserRule getRule() { return rule; }

		//{typehierarchy::StringType} "StringType" name=EString
		public Group getGroup() { return cGroup; }

		//{typehierarchy::StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"StringType"
		public Keyword getStringTypeKeyword_1() { return cStringTypeKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class UserTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDomainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDomainAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDomainEStringParserRuleCall_5_0 = (RuleCall)cDomainAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDomainAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDomainEStringParserRuleCall_6_1_0 = (RuleCall)cDomainAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//UserType returns typehierarchy::UserType:
		//	"UserType" name=EString "{" "domain" "{" domain+=EString ("," domain+=EString)* "}" "}";
		public ParserRule getRule() { return rule; }

		//"UserType" name=EString "{" "domain" "{" domain+=EString ("," domain+=EString)* "}" "}"
		public Group getGroup() { return cGroup; }

		//"UserType"
		public Keyword getUserTypeKeyword_0() { return cUserTypeKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"domain"
		public Keyword getDomainKeyword_3() { return cDomainKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//domain+=EString
		public Assignment getDomainAssignment_5() { return cDomainAssignment_5; }

		//EString
		public RuleCall getDomainEStringParserRuleCall_5_0() { return cDomainEStringParserRuleCall_5_0; }

		//("," domain+=EString)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//domain+=EString
		public Assignment getDomainAssignment_6_1() { return cDomainAssignment_6_1; }

		//EString
		public RuleCall getDomainEStringParserRuleCall_6_1_0() { return cDomainEStringParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cContainedTypesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContainedTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cContainedTypesSimpleTypeCrossReference_5_0 = (CrossReference)cContainedTypesAssignment_5.eContents().get(0);
		private final RuleCall cContainedTypesSimpleTypeEStringParserRuleCall_5_0_1 = (RuleCall)cContainedTypesSimpleTypeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cContainedTypesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cContainedTypesSimpleTypeCrossReference_6_1_0 = (CrossReference)cContainedTypesAssignment_6_1.eContents().get(0);
		private final RuleCall cContainedTypesSimpleTypeEStringParserRuleCall_6_1_0_1 = (RuleCall)cContainedTypesSimpleTypeCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ComplexType returns typehierarchy::ComplexType:
		//	"ComplexType" name=EString "{" "containedTypes" "(" containedTypes+=[typehierarchy::SimpleType|EString] (","
		//	containedTypes+=[typehierarchy::SimpleType|EString])* ")" "}";
		public ParserRule getRule() { return rule; }

		//"ComplexType" name=EString "{" "containedTypes" "(" containedTypes+=[typehierarchy::SimpleType|EString] (","
		//containedTypes+=[typehierarchy::SimpleType|EString])* ")" "}"
		public Group getGroup() { return cGroup; }

		//"ComplexType"
		public Keyword getComplexTypeKeyword_0() { return cComplexTypeKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"containedTypes"
		public Keyword getContainedTypesKeyword_3() { return cContainedTypesKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//containedTypes+=[typehierarchy::SimpleType|EString]
		public Assignment getContainedTypesAssignment_5() { return cContainedTypesAssignment_5; }

		//[typehierarchy::SimpleType|EString]
		public CrossReference getContainedTypesSimpleTypeCrossReference_5_0() { return cContainedTypesSimpleTypeCrossReference_5_0; }

		//EString
		public RuleCall getContainedTypesSimpleTypeEStringParserRuleCall_5_0_1() { return cContainedTypesSimpleTypeEStringParserRuleCall_5_0_1; }

		//("," containedTypes+=[typehierarchy::SimpleType|EString])*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//containedTypes+=[typehierarchy::SimpleType|EString]
		public Assignment getContainedTypesAssignment_6_1() { return cContainedTypesAssignment_6_1; }

		//[typehierarchy::SimpleType|EString]
		public CrossReference getContainedTypesSimpleTypeCrossReference_6_1_0() { return cContainedTypesSimpleTypeCrossReference_6_1_0; }

		//EString
		public RuleCall getContainedTypesSimpleTypeEStringParserRuleCall_6_1_0_1() { return cContainedTypesSimpleTypeEStringParserRuleCall_6_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//DoubleType returns typehierarchy::DoubleType:
		//	{typehierarchy::DoubleType} "DoubleType" name=EString;
		public ParserRule getRule() { return rule; }

		//{typehierarchy::DoubleType} "DoubleType" name=EString
		public Group getGroup() { return cGroup; }

		//{typehierarchy::DoubleType}
		public Action getDoubleTypeAction_0() { return cDoubleTypeAction_0; }

		//"DoubleType"
		public Keyword getDoubleTypeKeyword_1() { return cDoubleTypeKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//BoolType returns typehierarchy::BoolType:
		//	{typehierarchy::BoolType} "BoolType" name=EString;
		public ParserRule getRule() { return rule; }

		//{typehierarchy::BoolType} "BoolType" name=EString
		public Group getGroup() { return cGroup; }

		//{typehierarchy::BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//"BoolType"
		public Keyword getBoolTypeKeyword_1() { return cBoolTypeKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInitialStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInitialStateStateMachineStateCrossReference_4_0 = (CrossReference)cInitialStateAssignment_4.eContents().get(0);
		private final RuleCall cInitialStateStateMachineStateEStringParserRuleCall_4_0_1 = (RuleCall)cInitialStateStateMachineStateCrossReference_4_0.eContents().get(1);
		private final Keyword cNodesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNodesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNodesStateMachineStateParserRuleCall_7_0 = (RuleCall)cNodesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cNodesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNodesStateMachineStateParserRuleCall_8_1_0 = (RuleCall)cNodesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cFiringRulesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cFiringRulesAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cFiringRulesFiringRuleParserRuleCall_10_2_0 = (RuleCall)cFiringRulesAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cFiringRulesAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cFiringRulesFiringRuleParserRuleCall_10_3_1_0 = (RuleCall)cFiringRulesAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//StateMachine returns dataflownet::StateMachine:
		//	"StateMachine" name=EString "{" "initialState" initialState=[dataflownet::StateMachineState|EString] "nodes" "{"
		//	nodes+=StateMachineState ("," nodes+=StateMachineState)* "}" ("firingRules" "{" firingRules+=FiringRule (","
		//	firingRules+=FiringRule)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"StateMachine" name=EString "{" "initialState" initialState=[dataflownet::StateMachineState|EString] "nodes" "{"
		//nodes+=StateMachineState ("," nodes+=StateMachineState)* "}" ("firingRules" "{" firingRules+=FiringRule (","
		//firingRules+=FiringRule)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"StateMachine"
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"initialState"
		public Keyword getInitialStateKeyword_3() { return cInitialStateKeyword_3; }

		//initialState=[dataflownet::StateMachineState|EString]
		public Assignment getInitialStateAssignment_4() { return cInitialStateAssignment_4; }

		//[dataflownet::StateMachineState|EString]
		public CrossReference getInitialStateStateMachineStateCrossReference_4_0() { return cInitialStateStateMachineStateCrossReference_4_0; }

		//EString
		public RuleCall getInitialStateStateMachineStateEStringParserRuleCall_4_0_1() { return cInitialStateStateMachineStateEStringParserRuleCall_4_0_1; }

		//"nodes"
		public Keyword getNodesKeyword_5() { return cNodesKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//nodes+=StateMachineState
		public Assignment getNodesAssignment_7() { return cNodesAssignment_7; }

		//StateMachineState
		public RuleCall getNodesStateMachineStateParserRuleCall_7_0() { return cNodesStateMachineStateParserRuleCall_7_0; }

		//("," nodes+=StateMachineState)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//nodes+=StateMachineState
		public Assignment getNodesAssignment_8_1() { return cNodesAssignment_8_1; }

		//StateMachineState
		public RuleCall getNodesStateMachineStateParserRuleCall_8_1_0() { return cNodesStateMachineStateParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//("firingRules" "{" firingRules+=FiringRule ("," firingRules+=FiringRule)* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"firingRules"
		public Keyword getFiringRulesKeyword_10_0() { return cFiringRulesKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//firingRules+=FiringRule
		public Assignment getFiringRulesAssignment_10_2() { return cFiringRulesAssignment_10_2; }

		//FiringRule
		public RuleCall getFiringRulesFiringRuleParserRuleCall_10_2_0() { return cFiringRulesFiringRuleParserRuleCall_10_2_0; }

		//("," firingRules+=FiringRule)*
		public Group getGroup_10_3() { return cGroup_10_3; }

		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }

		//firingRules+=FiringRule
		public Assignment getFiringRulesAssignment_10_3_1() { return cFiringRulesAssignment_10_3_1; }

		//FiringRule
		public RuleCall getFiringRulesFiringRuleParserRuleCall_10_3_1_0() { return cFiringRulesFiringRuleParserRuleCall_10_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class StateMachineStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateMachineStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputTransitionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInputTransitionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cInputTransitionsStateMachineTransitionCrossReference_4_2_0 = (CrossReference)cInputTransitionsAssignment_4_2.eContents().get(0);
		private final RuleCall cInputTransitionsStateMachineTransitionEStringParserRuleCall_4_2_0_1 = (RuleCall)cInputTransitionsStateMachineTransitionCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInputTransitionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cInputTransitionsStateMachineTransitionCrossReference_4_3_1_0 = (CrossReference)cInputTransitionsAssignment_4_3_1.eContents().get(0);
		private final RuleCall cInputTransitionsStateMachineTransitionEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cInputTransitionsStateMachineTransitionCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutputTransitionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutputTransitionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOutputTransitionsStateMachineTransitionParserRuleCall_5_2_0 = (RuleCall)cOutputTransitionsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutputTransitionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cOutputTransitionsStateMachineTransitionParserRuleCall_5_3_1_0 = (RuleCall)cOutputTransitionsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachineState returns dataflownet::StateMachineState:
		//	{dataflownet::StateMachineState} "StateMachineState" name=EString "{" ("inputTransitions" "("
		//	inputTransitions+=[dataflownet::StateMachineTransition|EString] (","
		//	inputTransitions+=[dataflownet::StateMachineTransition|EString])* ")")? ("outputTransitions" "{"
		//	outputTransitions+=StateMachineTransition ("," outputTransitions+=StateMachineTransition)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{dataflownet::StateMachineState} "StateMachineState" name=EString "{" ("inputTransitions" "("
		//inputTransitions+=[dataflownet::StateMachineTransition|EString] (","
		//inputTransitions+=[dataflownet::StateMachineTransition|EString])* ")")? ("outputTransitions" "{"
		//outputTransitions+=StateMachineTransition ("," outputTransitions+=StateMachineTransition)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{dataflownet::StateMachineState}
		public Action getStateMachineStateAction_0() { return cStateMachineStateAction_0; }

		//"StateMachineState"
		public Keyword getStateMachineStateKeyword_1() { return cStateMachineStateKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("inputTransitions" "(" inputTransitions+=[dataflownet::StateMachineTransition|EString] (","
		//inputTransitions+=[dataflownet::StateMachineTransition|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"inputTransitions"
		public Keyword getInputTransitionsKeyword_4_0() { return cInputTransitionsKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//inputTransitions+=[dataflownet::StateMachineTransition|EString]
		public Assignment getInputTransitionsAssignment_4_2() { return cInputTransitionsAssignment_4_2; }

		//[dataflownet::StateMachineTransition|EString]
		public CrossReference getInputTransitionsStateMachineTransitionCrossReference_4_2_0() { return cInputTransitionsStateMachineTransitionCrossReference_4_2_0; }

		//EString
		public RuleCall getInputTransitionsStateMachineTransitionEStringParserRuleCall_4_2_0_1() { return cInputTransitionsStateMachineTransitionEStringParserRuleCall_4_2_0_1; }

		//("," inputTransitions+=[dataflownet::StateMachineTransition|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//inputTransitions+=[dataflownet::StateMachineTransition|EString]
		public Assignment getInputTransitionsAssignment_4_3_1() { return cInputTransitionsAssignment_4_3_1; }

		//[dataflownet::StateMachineTransition|EString]
		public CrossReference getInputTransitionsStateMachineTransitionCrossReference_4_3_1_0() { return cInputTransitionsStateMachineTransitionCrossReference_4_3_1_0; }

		//EString
		public RuleCall getInputTransitionsStateMachineTransitionEStringParserRuleCall_4_3_1_0_1() { return cInputTransitionsStateMachineTransitionEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//("outputTransitions" "{" outputTransitions+=StateMachineTransition ("," outputTransitions+=StateMachineTransition)*
		//"}")?
		public Group getGroup_5() { return cGroup_5; }

		//"outputTransitions"
		public Keyword getOutputTransitionsKeyword_5_0() { return cOutputTransitionsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//outputTransitions+=StateMachineTransition
		public Assignment getOutputTransitionsAssignment_5_2() { return cOutputTransitionsAssignment_5_2; }

		//StateMachineTransition
		public RuleCall getOutputTransitionsStateMachineTransitionParserRuleCall_5_2_0() { return cOutputTransitionsStateMachineTransitionParserRuleCall_5_2_0; }

		//("," outputTransitions+=StateMachineTransition)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//outputTransitions+=StateMachineTransition
		public Assignment getOutputTransitionsAssignment_5_3_1() { return cOutputTransitionsAssignment_5_3_1; }

		//StateMachineTransition
		public RuleCall getOutputTransitionsStateMachineTransitionParserRuleCall_5_3_1_0() { return cOutputTransitionsStateMachineTransitionParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FiringRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FiringRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFiringRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCompTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCompTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCompTypeComparationEnumRuleCall_3_1_0 = (RuleCall)cCompTypeAssignment_3_1.eContents().get(0);
		private final Keyword cChannelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChannelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cChannelChannelCrossReference_5_0 = (CrossReference)cChannelAssignment_5.eContents().get(0);
		private final RuleCall cChannelChannelEStringParserRuleCall_5_0_1 = (RuleCall)cChannelChannelCrossReference_5_0.eContents().get(1);
		private final Keyword cTokensKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTokensAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTokensTokenParserRuleCall_8_0 = (RuleCall)cTokensAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FiringRule returns dataflownet::FiringRule:
		//	"FiringRule" name=EString "{" ("compType" compType=Comparation)? "channel" channel=[dataflownet::Channel|EString]
		//	"tokens" "{" tokens=Token "}" "}";
		public ParserRule getRule() { return rule; }

		//"FiringRule" name=EString "{" ("compType" compType=Comparation)? "channel" channel=[dataflownet::Channel|EString]
		//"tokens" "{" tokens=Token "}" "}"
		public Group getGroup() { return cGroup; }

		//"FiringRule"
		public Keyword getFiringRuleKeyword_0() { return cFiringRuleKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("compType" compType=Comparation)?
		public Group getGroup_3() { return cGroup_3; }

		//"compType"
		public Keyword getCompTypeKeyword_3_0() { return cCompTypeKeyword_3_0; }

		//compType=Comparation
		public Assignment getCompTypeAssignment_3_1() { return cCompTypeAssignment_3_1; }

		//Comparation
		public RuleCall getCompTypeComparationEnumRuleCall_3_1_0() { return cCompTypeComparationEnumRuleCall_3_1_0; }

		//"channel"
		public Keyword getChannelKeyword_4() { return cChannelKeyword_4; }

		//channel=[dataflownet::Channel|EString]
		public Assignment getChannelAssignment_5() { return cChannelAssignment_5; }

		//[dataflownet::Channel|EString]
		public CrossReference getChannelChannelCrossReference_5_0() { return cChannelChannelCrossReference_5_0; }

		//EString
		public RuleCall getChannelChannelEStringParserRuleCall_5_0_1() { return cChannelChannelEStringParserRuleCall_5_0_1; }

		//"tokens"
		public Keyword getTokensKeyword_6() { return cTokensKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//tokens=Token
		public Assignment getTokensAssignment_8() { return cTokensAssignment_8; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_8_0() { return cTokensTokenParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class StateMachineTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPriorityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPriorityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPriorityEIntParserRuleCall_4_0 = (RuleCall)cPriorityAssignment_4.eContents().get(0);
		private final Keyword cToStateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToStateStateMachineStateCrossReference_6_0 = (CrossReference)cToStateAssignment_6.eContents().get(0);
		private final RuleCall cToStateStateMachineStateEStringParserRuleCall_6_0_1 = (RuleCall)cToStateStateMachineStateCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInputsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cInputsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cInputsFiringRuleCrossReference_7_2_0 = (CrossReference)cInputsAssignment_7_2.eContents().get(0);
		private final RuleCall cInputsFiringRuleEStringParserRuleCall_7_2_0_1 = (RuleCall)cInputsFiringRuleCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cInputsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final CrossReference cInputsFiringRuleCrossReference_7_3_1_0 = (CrossReference)cInputsAssignment_7_3_1.eContents().get(0);
		private final RuleCall cInputsFiringRuleEStringParserRuleCall_7_3_1_0_1 = (RuleCall)cInputsFiringRuleCrossReference_7_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOutputsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOutputsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cOutputsFiringRuleCrossReference_8_2_0 = (CrossReference)cOutputsAssignment_8_2.eContents().get(0);
		private final RuleCall cOutputsFiringRuleEStringParserRuleCall_8_2_0_1 = (RuleCall)cOutputsFiringRuleCrossReference_8_2_0.eContents().get(1);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cOutputsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final CrossReference cOutputsFiringRuleCrossReference_8_3_1_0 = (CrossReference)cOutputsAssignment_8_3_1.eContents().get(0);
		private final RuleCall cOutputsFiringRuleEStringParserRuleCall_8_3_1_0_1 = (RuleCall)cOutputsFiringRuleCrossReference_8_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//StateMachineTransition returns dataflownet::StateMachineTransition:
		//	"StateMachineTransition" name=EString "{" "priority" priority=EInt "toState"
		//	toState=[dataflownet::StateMachineState|EString] ("inputs" "(" inputs+=[dataflownet::FiringRule|EString] (","
		//	inputs+=[dataflownet::FiringRule|EString])* ")")? ("outputs" "(" outputs+=[dataflownet::FiringRule|EString] (","
		//	outputs+=[dataflownet::FiringRule|EString])* ")")? "}";
		public ParserRule getRule() { return rule; }

		//"StateMachineTransition" name=EString "{" "priority" priority=EInt "toState"
		//toState=[dataflownet::StateMachineState|EString] ("inputs" "(" inputs+=[dataflownet::FiringRule|EString] (","
		//inputs+=[dataflownet::FiringRule|EString])* ")")? ("outputs" "(" outputs+=[dataflownet::FiringRule|EString] (","
		//outputs+=[dataflownet::FiringRule|EString])* ")")? "}"
		public Group getGroup() { return cGroup; }

		//"StateMachineTransition"
		public Keyword getStateMachineTransitionKeyword_0() { return cStateMachineTransitionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"priority"
		public Keyword getPriorityKeyword_3() { return cPriorityKeyword_3; }

		//priority=EInt
		public Assignment getPriorityAssignment_4() { return cPriorityAssignment_4; }

		//EInt
		public RuleCall getPriorityEIntParserRuleCall_4_0() { return cPriorityEIntParserRuleCall_4_0; }

		//"toState"
		public Keyword getToStateKeyword_5() { return cToStateKeyword_5; }

		//toState=[dataflownet::StateMachineState|EString]
		public Assignment getToStateAssignment_6() { return cToStateAssignment_6; }

		//[dataflownet::StateMachineState|EString]
		public CrossReference getToStateStateMachineStateCrossReference_6_0() { return cToStateStateMachineStateCrossReference_6_0; }

		//EString
		public RuleCall getToStateStateMachineStateEStringParserRuleCall_6_0_1() { return cToStateStateMachineStateEStringParserRuleCall_6_0_1; }

		//("inputs" "(" inputs+=[dataflownet::FiringRule|EString] ("," inputs+=[dataflownet::FiringRule|EString])* ")")?
		public Group getGroup_7() { return cGroup_7; }

		//"inputs"
		public Keyword getInputsKeyword_7_0() { return cInputsKeyword_7_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//inputs+=[dataflownet::FiringRule|EString]
		public Assignment getInputsAssignment_7_2() { return cInputsAssignment_7_2; }

		//[dataflownet::FiringRule|EString]
		public CrossReference getInputsFiringRuleCrossReference_7_2_0() { return cInputsFiringRuleCrossReference_7_2_0; }

		//EString
		public RuleCall getInputsFiringRuleEStringParserRuleCall_7_2_0_1() { return cInputsFiringRuleEStringParserRuleCall_7_2_0_1; }

		//("," inputs+=[dataflownet::FiringRule|EString])*
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//inputs+=[dataflownet::FiringRule|EString]
		public Assignment getInputsAssignment_7_3_1() { return cInputsAssignment_7_3_1; }

		//[dataflownet::FiringRule|EString]
		public CrossReference getInputsFiringRuleCrossReference_7_3_1_0() { return cInputsFiringRuleCrossReference_7_3_1_0; }

		//EString
		public RuleCall getInputsFiringRuleEStringParserRuleCall_7_3_1_0_1() { return cInputsFiringRuleEStringParserRuleCall_7_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//("outputs" "(" outputs+=[dataflownet::FiringRule|EString] ("," outputs+=[dataflownet::FiringRule|EString])* ")")?
		public Group getGroup_8() { return cGroup_8; }

		//"outputs"
		public Keyword getOutputsKeyword_8_0() { return cOutputsKeyword_8_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//outputs+=[dataflownet::FiringRule|EString]
		public Assignment getOutputsAssignment_8_2() { return cOutputsAssignment_8_2; }

		//[dataflownet::FiringRule|EString]
		public CrossReference getOutputsFiringRuleCrossReference_8_2_0() { return cOutputsFiringRuleCrossReference_8_2_0; }

		//EString
		public RuleCall getOutputsFiringRuleEStringParserRuleCall_8_2_0_1() { return cOutputsFiringRuleEStringParserRuleCall_8_2_0_1; }

		//("," outputs+=[dataflownet::FiringRule|EString])*
		public Group getGroup_8_3() { return cGroup_8_3; }

		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }

		//outputs+=[dataflownet::FiringRule|EString]
		public Assignment getOutputsAssignment_8_3_1() { return cOutputsAssignment_8_3_1; }

		//[dataflownet::FiringRule|EString]
		public CrossReference getOutputsFiringRuleCrossReference_8_3_1_0() { return cOutputsFiringRuleCrossReference_8_3_1_0; }

		//EString
		public RuleCall getOutputsFiringRuleEStringParserRuleCall_8_3_1_0_1() { return cOutputsFiringRuleEStringParserRuleCall_8_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueEStringParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTypeTypeCrossReference_8_0 = (CrossReference)cTypeAssignment_8.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_8_0_1 = (RuleCall)cTypeTypeCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Token returns dataflownet::Token:
		//	"Token" "{" "value" "{" value+=EString ("," value+=EString)* "}" "type" type=[typehierarchy::Type|EString] "}";
		public ParserRule getRule() { return rule; }

		//"Token" "{" "value" "{" value+=EString ("," value+=EString)* "}" "type" type=[typehierarchy::Type|EString] "}"
		public Group getGroup() { return cGroup; }

		//"Token"
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"value"
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//value+=EString
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//EString
		public RuleCall getValueEStringParserRuleCall_4_0() { return cValueEStringParserRuleCall_4_0; }

		//("," value+=EString)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//value+=EString
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//EString
		public RuleCall getValueEStringParserRuleCall_5_1_0() { return cValueEStringParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"type"
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }

		//type=[typehierarchy::Type|EString]
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }

		//[typehierarchy::Type|EString]
		public CrossReference getTypeTypeCrossReference_8_0() { return cTypeTypeCrossReference_8_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_8_0_1() { return cTypeTypeEStringParserRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	public class ProtocolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPahoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPahoPahoKeyword_0_0 = (Keyword)cPahoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAkkaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAkkaAkkaKeyword_1_0 = (Keyword)cAkkaEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Protocol returns dataflownet::Protocol:
		//	Paho | Akka;
		public EnumRule getRule() { return rule; }

		//Paho | Akka
		public Alternatives getAlternatives() { return cAlternatives; }

		//Paho
		public EnumLiteralDeclaration getPahoEnumLiteralDeclaration_0() { return cPahoEnumLiteralDeclaration_0; }

		//"Paho"
		public Keyword getPahoPahoKeyword_0_0() { return cPahoPahoKeyword_0_0; }

		//Akka
		public EnumLiteralDeclaration getAkkaEnumLiteralDeclaration_1() { return cAkkaEnumLiteralDeclaration_1; }

		//"Akka"
		public Keyword getAkkaAkkaKeyword_1_0() { return cAkkaAkkaKeyword_1_0; }
	}

	public class ComparationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Comparation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualNotEqualKeyword_1_0 = (Keyword)cNotEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessLessKeyword_2_0 = (Keyword)cLessEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Comparation returns dataflownet::Comparation:
		//	Equal | NotEqual | Less | Greater;
		public EnumRule getRule() { return rule; }

		//Equal | NotEqual | Less | Greater
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equal
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"Equal"
		public Keyword getEqualEqualKeyword_0_0() { return cEqualEqualKeyword_0_0; }

		//NotEqual
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_1() { return cNotEqualEnumLiteralDeclaration_1; }

		//"NotEqual"
		public Keyword getNotEqualNotEqualKeyword_1_0() { return cNotEqualNotEqualKeyword_1_0; }

		//Less
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_2() { return cLessEnumLiteralDeclaration_2; }

		//"Less"
		public Keyword getLessLessKeyword_2_0() { return cLessLessKeyword_2_0; }

		//Greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//"Greater"
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }
	}
	
	private DataflowSystemElements pDataflowSystem;
	private TypeElements pType;
	private NodeElements pNode;
	private SimpleTypeElements pSimpleType;
	private EStringElements pEString;
	private DataflowNetElements pDataflowNet;
	private ChannelElements pChannel;
	private ProcessElements pProcess;
	private ProtocolElements unknownRuleProtocol;
	private IntTypeElements pIntType;
	private StringTypeElements pStringType;
	private UserTypeElements pUserType;
	private ComplexTypeElements pComplexType;
	private DoubleTypeElements pDoubleType;
	private BoolTypeElements pBoolType;
	private StateMachineElements pStateMachine;
	private StateMachineStateElements pStateMachineState;
	private FiringRuleElements pFiringRule;
	private StateMachineTransitionElements pStateMachineTransition;
	private EIntElements pEInt;
	private TokenElements pToken;
	private ComparationElements unknownRuleComparation;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DNLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.mdsd.pineapple.language.DNLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataflowSystem returns dataflownet::DataflowSystem:
	//	"DataflowSystem" name=EString "{" "protocol" protocol=Protocol ("types" "{" types+=Type ("," types+=Type)* "}")?
	//	"nets" "{" nets+=DataflowNet ("," nets+=DataflowNet)* "}" ("channels" "{" channels+=Channel ("," channels+=Channel)*
	//	"}")? "processes" "{" processes+=Process ("," processes+=Process)* "}" "}";
	public DataflowSystemElements getDataflowSystemAccess() {
		return (pDataflowSystem != null) ? pDataflowSystem : (pDataflowSystem = new DataflowSystemElements());
	}
	
	public ParserRule getDataflowSystemRule() {
		return getDataflowSystemAccess().getRule();
	}

	//Type returns typehierarchy::Type:
	//	IntType | StringType | UserType | ComplexType | DoubleType | BoolType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Node returns dataflownet::Node:
	//	StateMachine | DataflowNet;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//SimpleType returns typehierarchy::SimpleType:
	//	IntType | StringType | UserType | DoubleType | BoolType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//DataflowNet returns dataflownet::DataflowNet:
	//	{dataflownet::DataflowNet} "DataflowNet" name=EString "{" ("outputChannels" "("
	//	outputChannels+=[dataflownet::Channel|EString] ("," outputChannels+=[dataflownet::Channel|EString])* ")")?
	//	("inputChannels" "(" inputChannels+=[dataflownet::Channel|EString] (","
	//	inputChannels+=[dataflownet::Channel|EString])* ")")? ("process" process=[dataflownet::Process|EString])? ("nodes"
	//	"{" nodes+=Node ("," nodes+=Node)* "}")? ("ownChannels" "{" ownChannels+=Channel ("," ownChannels+=Channel)* "}")?
	//	"}";
	public DataflowNetElements getDataflowNetAccess() {
		return (pDataflowNet != null) ? pDataflowNet : (pDataflowNet = new DataflowNetElements());
	}
	
	public ParserRule getDataflowNetRule() {
		return getDataflowNetAccess().getRule();
	}

	//Channel returns dataflownet::Channel:
	//	"Channel" name=EString "{" "type" type=[typehierarchy::Type|EString] "}";
	public ChannelElements getChannelAccess() {
		return (pChannel != null) ? pChannel : (pChannel = new ChannelElements());
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}

	//Process returns dataflownet::Process:
	//	"Process" name=EString "{" "host" host=EString "}";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//enum Protocol returns dataflownet::Protocol:
	//	Paho | Akka;
	public ProtocolElements getProtocolAccess() {
		return (unknownRuleProtocol != null) ? unknownRuleProtocol : (unknownRuleProtocol = new ProtocolElements());
	}
	
	public EnumRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//IntType returns typehierarchy::IntType:
	//	{typehierarchy::IntType} "IntType" name=EString;
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//StringType returns typehierarchy::StringType:
	//	{typehierarchy::StringType} "StringType" name=EString;
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//UserType returns typehierarchy::UserType:
	//	"UserType" name=EString "{" "domain" "{" domain+=EString ("," domain+=EString)* "}" "}";
	public UserTypeElements getUserTypeAccess() {
		return (pUserType != null) ? pUserType : (pUserType = new UserTypeElements());
	}
	
	public ParserRule getUserTypeRule() {
		return getUserTypeAccess().getRule();
	}

	//ComplexType returns typehierarchy::ComplexType:
	//	"ComplexType" name=EString "{" "containedTypes" "(" containedTypes+=[typehierarchy::SimpleType|EString] (","
	//	containedTypes+=[typehierarchy::SimpleType|EString])* ")" "}";
	public ComplexTypeElements getComplexTypeAccess() {
		return (pComplexType != null) ? pComplexType : (pComplexType = new ComplexTypeElements());
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//DoubleType returns typehierarchy::DoubleType:
	//	{typehierarchy::DoubleType} "DoubleType" name=EString;
	public DoubleTypeElements getDoubleTypeAccess() {
		return (pDoubleType != null) ? pDoubleType : (pDoubleType = new DoubleTypeElements());
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//BoolType returns typehierarchy::BoolType:
	//	{typehierarchy::BoolType} "BoolType" name=EString;
	public BoolTypeElements getBoolTypeAccess() {
		return (pBoolType != null) ? pBoolType : (pBoolType = new BoolTypeElements());
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//StateMachine returns dataflownet::StateMachine:
	//	"StateMachine" name=EString "{" "initialState" initialState=[dataflownet::StateMachineState|EString] "nodes" "{"
	//	nodes+=StateMachineState ("," nodes+=StateMachineState)* "}" ("firingRules" "{" firingRules+=FiringRule (","
	//	firingRules+=FiringRule)* "}")? "}";
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//StateMachineState returns dataflownet::StateMachineState:
	//	{dataflownet::StateMachineState} "StateMachineState" name=EString "{" ("inputTransitions" "("
	//	inputTransitions+=[dataflownet::StateMachineTransition|EString] (","
	//	inputTransitions+=[dataflownet::StateMachineTransition|EString])* ")")? ("outputTransitions" "{"
	//	outputTransitions+=StateMachineTransition ("," outputTransitions+=StateMachineTransition)* "}")? "}";
	public StateMachineStateElements getStateMachineStateAccess() {
		return (pStateMachineState != null) ? pStateMachineState : (pStateMachineState = new StateMachineStateElements());
	}
	
	public ParserRule getStateMachineStateRule() {
		return getStateMachineStateAccess().getRule();
	}

	//FiringRule returns dataflownet::FiringRule:
	//	"FiringRule" name=EString "{" ("compType" compType=Comparation)? "channel" channel=[dataflownet::Channel|EString]
	//	"tokens" "{" tokens=Token "}" "}";
	public FiringRuleElements getFiringRuleAccess() {
		return (pFiringRule != null) ? pFiringRule : (pFiringRule = new FiringRuleElements());
	}
	
	public ParserRule getFiringRuleRule() {
		return getFiringRuleAccess().getRule();
	}

	//StateMachineTransition returns dataflownet::StateMachineTransition:
	//	"StateMachineTransition" name=EString "{" "priority" priority=EInt "toState"
	//	toState=[dataflownet::StateMachineState|EString] ("inputs" "(" inputs+=[dataflownet::FiringRule|EString] (","
	//	inputs+=[dataflownet::FiringRule|EString])* ")")? ("outputs" "(" outputs+=[dataflownet::FiringRule|EString] (","
	//	outputs+=[dataflownet::FiringRule|EString])* ")")? "}";
	public StateMachineTransitionElements getStateMachineTransitionAccess() {
		return (pStateMachineTransition != null) ? pStateMachineTransition : (pStateMachineTransition = new StateMachineTransitionElements());
	}
	
	public ParserRule getStateMachineTransitionRule() {
		return getStateMachineTransitionAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Token returns dataflownet::Token:
	//	"Token" "{" "value" "{" value+=EString ("," value+=EString)* "}" "type" type=[typehierarchy::Type|EString] "}";
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//enum Comparation returns dataflownet::Comparation:
	//	Equal | NotEqual | Less | Greater;
	public ComparationElements getComparationAccess() {
		return (unknownRuleComparation != null) ? unknownRuleComparation : (unknownRuleComparation = new ComparationElements());
	}
	
	public EnumRule getComparationRule() {
		return getComparationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
