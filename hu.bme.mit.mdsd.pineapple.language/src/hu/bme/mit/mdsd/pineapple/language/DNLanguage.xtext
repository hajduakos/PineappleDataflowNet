// automatically generated by Xtext
grammar hu.bme.mit.mdsd.pineapple.language.DNLanguage with org.eclipse.xtext.common.Terminals

import "http://dataflownet/1.0" as dataflownet
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://typehierarchy/1.0" as typehierarchy

DataflowSystem returns dataflownet::DataflowSystem:
	'DataflowSystem'
	name=EString
	'{'
		'protocol' protocol=Protocol
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
		'nets' '{' nets+=DataflowNet ( "," nets+=DataflowNet)* '}' 
		('channels' '{' channels+=Channel ( "," channels+=Channel)* '}' )?
		'processes' '{' processes+=Process ( "," processes+=Process)* '}' 
	'}';

Type returns typehierarchy::Type:
	IntType | StringType | UserType | ComplexType | DoubleType | BoolType;




Node returns dataflownet::Node:
	StateMachine | DataflowNet;

SimpleType returns typehierarchy::SimpleType:
	IntType | StringType | UserType | DoubleType | BoolType;





EString returns ecore::EString:
	STRING | ID;

DataflowNet returns dataflownet::DataflowNet:
	{dataflownet::DataflowNet}
	'DataflowNet'
	name=EString
	'{'
		('outputChannels' '(' outputChannels+=[dataflownet::Channel|EString] ( "," outputChannels+=[dataflownet::Channel|EString])* ')' )?
		('inputChannels' '(' inputChannels+=[dataflownet::Channel|EString] ( "," inputChannels+=[dataflownet::Channel|EString])* ')' )?
		('process' process=[dataflownet::Process|EString])?
		('nodes' '{' nodes+=Node ( "," nodes+=Node)* '}' )?
		('ownChannels' '{' ownChannels+=Channel ( "," ownChannels+=Channel)* '}' )?
	'}';

Channel returns dataflownet::Channel:
	'Channel'
	name=EString
	'{'
		'type' type=[typehierarchy::Type|EString]
	'}';

Process returns dataflownet::Process:
	'Process'
	name=EString
	'{'
		'host' host=EString
	'}';

enum Protocol returns dataflownet::Protocol:
				Paho = 'Paho' | Akka = 'Akka';

IntType returns typehierarchy::IntType:
	{typehierarchy::IntType}
	'IntType'
	name=EString;

StringType returns typehierarchy::StringType:
	{typehierarchy::StringType}
	'StringType'
	name=EString;

UserType returns typehierarchy::UserType:
	'UserType'
	name=EString
	'{'
		'domain' '{' domain+=EString ( "," domain+=EString)* '}' 
	'}';

ComplexType returns typehierarchy::ComplexType:
	'ComplexType'
	name=EString
	'{'
		'containedTypes' '(' containedTypes+=[typehierarchy::SimpleType|EString] ( "," containedTypes+=[typehierarchy::SimpleType|EString])* ')' 
	'}';

DoubleType returns typehierarchy::DoubleType:
	{typehierarchy::DoubleType}
	'DoubleType'
	name=EString;

BoolType returns typehierarchy::BoolType:
	{typehierarchy::BoolType}
	'BoolType'
	name=EString;

StateMachine returns dataflownet::StateMachine:
	'StateMachine'
	name=EString
	'{'
		'initialState' initialState=[dataflownet::StateMachineState|EString]
		'nodes' '{' nodes+=StateMachineState ( "," nodes+=StateMachineState)* '}' 
		('firingRules' '{' firingRules+=FiringRule ( "," firingRules+=FiringRule)* '}' )?
	'}';

StateMachineState returns dataflownet::StateMachineState:
	{dataflownet::StateMachineState}
	'StateMachineState'
	name=EString
	'{'
		('inputTransitions' '(' inputTransitions+=[dataflownet::StateMachineTransition|EString] ( "," inputTransitions+=[dataflownet::StateMachineTransition|EString])* ')' )?
		('outputTransitions' '{' outputTransitions+=StateMachineTransition ( "," outputTransitions+=StateMachineTransition)* '}' )?
	'}';

FiringRule returns dataflownet::FiringRule:
	'FiringRule'
	name=EString
	'{'
		('compType' compType=Comparation)?
		'channel' channel=[dataflownet::Channel|EString]
		'tokens' '{' tokens=Token '}'
	'}';

StateMachineTransition returns dataflownet::StateMachineTransition:
	'StateMachineTransition'
	name=EString
	'{'
		'priority' priority=EInt
		'toState' toState=[dataflownet::StateMachineState|EString]
		('inputs' '(' inputs+=[dataflownet::FiringRule|EString] ( "," inputs+=[dataflownet::FiringRule|EString])* ')' )?
		('outputs' '(' outputs+=[dataflownet::FiringRule|EString] ( "," outputs+=[dataflownet::FiringRule|EString])* ')' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Token returns dataflownet::Token:
	'Token'
	'{'
		'value' '{' value+=EString ( "," value+=EString)* '}' 
		'type' type=[typehierarchy::Type|EString]
	'}';

enum Comparation returns dataflownet::Comparation:
				Equal = 'Equal' | NotEqual = 'NotEqual' | Less = 'Less' | Greater = 'Greater';
